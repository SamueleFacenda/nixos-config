name: Update Nix Flake Inputs

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 22 * * *'
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering
    inputs:
      rebase_strategy:
        description: 'Strategy for updating the branch'
        required: false
        default: 'rebase'
        type: choice
        options:
        - 'rebase'
        - 'reset'
      force_update:
        description: 'Force update even if rebase fails'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  update-flake:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all branches
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v23
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update/rebase updated branch
        run: |
          # Switch to main and pull latest
          git checkout main
          git pull origin main
          
          # Determine strategy (from manual input or default to rebase)
          STRATEGY="${{ github.event.inputs.rebase_strategy || 'rebase' }}"
          FORCE_UPDATE="${{ github.event.inputs.force_update || 'true' }}"
          
          echo "Using strategy: $STRATEGY"
          
          # Check if updated branch exists remotely
          if git ls-remote --exit-code --heads origin updated > /dev/null 2>&1; then
            echo "Updated branch exists..."
            
            # Checkout updated branch
            git checkout updated
            git pull origin updated
            
            # Store the HEAD before rebase/reset to detect changes
            OLD_HEAD=$(git rev-parse HEAD)
            echo "HEAD before update: $OLD_HEAD"
            
            if [[ "$STRATEGY" == "rebase" ]]; then
              echo "Attempting rebase with main..."
              
              # Try to rebase updated onto main
              if git rebase main; then
                echo "✅ Rebase successful"
              else
                echo "❌ Rebase failed"
                git rebase --abort
                
                if [[ "$FORCE_UPDATE" == "true" ]]; then
                  echo "🔄 Force update enabled, resetting to main..."
                  git reset --hard main
                else
                  echo "❌ Rebase failed and force update disabled. Exiting."
                  exit 1
                fi
              fi
            else
              echo "🔄 Using reset strategy..."
              git reset --hard main
            fi
            
            # Check if HEAD changed after rebase/reset
            NEW_HEAD=$(git rev-parse HEAD)
            echo "HEAD after update: $NEW_HEAD"
            
            if [[ "$OLD_HEAD" != "$NEW_HEAD" ]]; then
              echo "main_updated=true" >> $GITHUB_ENV
              echo "📋 Branch updated with main changes"
              
              # Push the rebased/reset branch immediately
              echo "🚀 Pushing updated branch with main changes..."
              git push origin updated --force-with-lease
            else
              echo "main_updated=false" >> $GITHUB_ENV
              echo "ℹ️ No changes from main (branch was already up to date)"
            fi
          else
            echo "Updated branch doesn't exist, creating from main..."
            git checkout -b updated
            echo "main_updated=true" >> $GITHUB_ENV
            
            # Push the new branch
            git push -u origin updated
          fi

      - name: Update flake inputs
        run: |
          # nix flake lock --verbose --update-input nixpkgs
          nix flake update --verbose

      - name: Check for changes
        id: changes
        run: |
          FLAKE_CHANGED=false
          
          if git diff --quiet HEAD -- flake.lock; then
            echo "No changes in flake.lock"
          else
            echo "Changes detected in flake.lock"
            FLAKE_CHANGED=true
          fi
          
          # Only commit if flake changed (main updates are already pushed)
          if [[ "$FLAKE_CHANGED" == "true" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Commit needed: flake inputs changed"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No commit needed: flake inputs unchanged"
          fi
          
          echo "flake_changed=$FLAKE_CHANGED" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          # Add flake.lock changes
          git add flake.lock
          
          # Create a detailed commit message
          echo "Update flake inputs" > commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Updated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> commit_msg.txt
          echo "" >> commit_msg.txt
          echo "🔄 Flake inputs updated" >> commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Flake input changes:" >> commit_msg.txt
          # Show a summary of what changed in flake inputs
          if command -v nix &> /dev/null; then
            git diff HEAD~1 -- flake.lock | grep -E "^\+.*\"rev\":" | sed 's/^+//' >> commit_msg.txt 2>/dev/null || echo "  (details in flake.lock)" >> commit_msg.txt
          else
            echo "  See flake.lock for detailed changes" >> commit_msg.txt
          fi
          
          git commit -F commit_msg.txt
          git push origin updated

      - name: Summary
        run: |
          if [[ "${{ steps.changes.outputs.flake_changed }}" == "true" ]]; then
            echo "✅ Flake inputs updated and committed"
          fi
          
          if [[ "${{ env.main_updated }}" == "true" ]]; then
            echo "✅ Branch synced with new main commits"
          fi
          
          if [[ "${{ steps.changes.outputs.flake_changed }}" == "true" || "${{ env.main_updated }}" == "true" ]]; then
            echo "📝 Updated branch is current"
            echo "🔗 Branch URL: ${{ github.server_url }}/${{ github.repository }}/tree/updated"
          else
            echo "ℹ️  No updates needed - branch is current with main and inputs"
          fi
